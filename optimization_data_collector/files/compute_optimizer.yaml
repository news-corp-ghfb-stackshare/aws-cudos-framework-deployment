AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves AWS Compute Optimizer information from across an organization
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  RoleNameARN:
    Type: String
    Description: ARN of the IAM role deployed in the management accounts which can retrieve lambda data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: ComputeOptimizer
  Schedule:
    Type: String
    Description: Cron job to trigger the lambda using cloudwatch event
    Default: "rate(14 days)"
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  CodeBucket:
      Type: String
      Description: S3 Bucket that exists and holds code
      Default: aws-well-architected-labs
      AllowedValues:
        - aws-well-architected-labs-ireland
        - aws-well-architected-labs
        - aws-well-architected-labs-ohio
        - aws-well-architected-labs-virginia
        - aws-well-architected-labs-california
        - aws-well-architected-labs-oregon
        - aws-well-architected-labs-singapore
        - aws-well-architected-labs-frankfurt
        - aws-well-architected-labs-london
        - aws-well-architected-labs-stockholm
  CodeKey:
    Type: String
    Description: file name of ZipFile with data code
    Default: Cost/Labs/300_Optimization_Data_Collection/coc.zip
  Prefix:
    Type: String
    Description: Service which the data collector is looking at
    Default: COC
  GlueRoleARN:
    Type: String
  S3CrawlerQue:
    Type: String
    Description: SQS that will be used to trigger the crawler lambda to pull data in
  RolePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution of lambda data.
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
  LambdaARN:
    Description: Lambda Arn
    Value: 
       Fn::GetAtt:
        - LambdaFunction
        - Arn
  CrawlerFunctionARN:
    Description: Crawler Lambda Arn
    Value: 
       Fn::GetAtt:
        - CrawlerFunction
        - Arn
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}Lambda-Role-${CFDataName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /
      Policies:
        - PolicyName: !Sub "Assume-Management-${CFDataName}-Account-Role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource:
                  "*"
        - PolicyName: !Sub "${CFDataName}-S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  !Ref DestinationBucketARN
              - Effect: "Allow"
                Action:
                  - "glue:StartCrawler"
                Resource: "*"
        - PolicyName: "data"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                      - "s3:*"
                      - "sqs:ReceiveMessage"
                      - "sqs:DeleteMessage"
                      - "sqs:GetQueueAttributes"
                      - "compute-optimizer:*"
                      - "EC2:DescribeInstances"
                      - "cloudwatch:GetMetricData"
                      - "autoscaling:DescribeAutoScalingGroups"
                      - "compute-optimizer:UpdateEnrollmentStatus"
                      - "compute-optimizer:GetAutoScalingGroupRecommendations"
                      - "compute-optimizer:GetEC2InstanceRecommendations"
                      - "compute-optimizer:GetEnrollmentStatus"
                      - "compute-optimizer:GetEC2RecommendationProjectedMetrics"
                      - "compute-optimizer:GetRecommendationSummaries"
                      - "organizations:ListAccounts"
                      - "organizations:DescribeOrganization"
                      - "organizations:DescribeAccount"
                      - "lambda:ListFunctions"
                      - "lambda:ListProvisionedConcurrencyConfigs"
                      - "EC2:DescribeVolumes"     
                Resource: "*"
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${CFDataName}-Lambda-Function"
      Description: !Sub "LambdaFunction to retrieve ${CFDataName}"
      Runtime: python3.8
      Code:
         S3Bucket: !Ref CodeBucket
         S3Key: !Ref CodeKey
         #ZipFile

      Handler: 'COC.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          REGION:
            Ref: "AWS::Region"
          BUCKET_NAME:
            Ref: DestinationBucket
          ROLE_ARN:
            Ref: RoleNameARN
          PATH:
            Ref: CFDataName
          EC2Crawler:
            Ref: EC2Crawler
          AUTOCrawler:
            Ref: AUTOCrawler
          EBSCrawler:
            Ref: EBSCrawler
          LambdaCrawler:
            Ref: LambdaCrawler
          PREFIX:
            Ref: Prefix
  CloudWatchTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Scheduler-For-${Prefix}"
      Name: !Sub "Scheduler-For-${Prefix}"
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaFunction
              - Arn
          Id: TriggerForGetAccounts
  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt CloudWatchTrigger.Arn
  CrawlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "Compute-Optimizer-Crawler-Lambda-Function"
      Description: "LambdaFunction to retrieve start CO Crawlers"
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          import logging
          import os

          def lambda_handler(event, context):
              glue_client = boto3.client('glue')
              crawlers = [os.environ["EC2Crawler"], os.environ["AUTOCrawler"],os.environ["EBSCrawler"],os.environ["LambdaCrawler"] ]

              for crawler in crawlers:
                  try:
                      glue_client.start_crawler(Name=crawler)
                  except Exception as e:
                      # Send some context about this error to Lambda Logs
                      logging.warning("%s" % e)

      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role:
        Fn::GetAtt:
          - CrawlerLambdaIAMRole
          - Arn
      Environment:
        Variables:
          EC2Crawler:
            Ref: EC2Crawler
          AUTOCrawler:
            Ref: AUTOCrawler
          EBSCrawler:
            Ref: EBSCrawler
          LambdaCrawler:
            Ref: LambdaCrawler 
  CrawlerLambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Sub 'arn:aws:s3:::${DestinationBucket}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - "glue:StartCrawler"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: '*'
  LambdaCrawlerInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt CrawlerFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sqs.amazonaws.com #s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref S3CrawlerQue
  LambdaCrawlerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref S3CrawlerQue
      FunctionName: !GetAtt CrawlerFunction.Arn
  EC2Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "ec2_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_ec2_instance"
            Exclusions:
              - "**.json"
  AUTOCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "auto_scale_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_auto_scale"
            Exclusions:
              - "**.json"
  EBSCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "ebs_volume_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_ebs_volume"
            Exclusions:
              - "**.json"
  LambdaCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "lambda_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_lambda"
            Exclusions:
              - "**.json"
  EC2AthenaQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: !Sub ${CFDataName}-EC2-summary-view
      QueryString: 
        "SELECT instancearn, split_part(replace(instancearn,'\"' ,''),'/',2) as instance_id ,
         try_cast(current_onDemandPrice AS DOUBLE) - try_cast(recommendationOptions_1_onDemandPrice AS DOUBLE) as recommendationOptions_1_Saving , 
         try_cast(current_onDemandPrice AS DOUBLE) - try_cast(recommendationOptions_2_onDemandPrice AS DOUBLE) as recommendationOptions_2_Saving , 
         try_cast(current_onDemandPrice AS DOUBLE) - try_cast(recommendationOptions_3_onDemandPrice AS DOUBLE) as recommendationOptions_3_Saving ,
          * FROM optimization_data.compute_optimizer_ec2_instance WHERE instancearn like '%arn%' "
  EBSAthenaQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: !Sub ${CFDataName}-EBS-summary-view
      QueryString: 
        "SELECT split_part(replace(volumearn,'\"' ,''),'/',2) as volumeid,
        try_cast(
          current_monthlyprice - recommendationoptions_1_monthlyprice AS DOUBLE
        ) as recommendationOptions_1_Saving,
        try_cast(
          current_monthlyprice - recommendationoptions_2_monthlyprice AS DOUBLE
        ) as recommendationOptions_2_Saving,
          *
        FROM optimization_data.compute_optimizer_ebs_volume 
        WHERE volumearn like '%vol%' "
  LambdaAthenaQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: !Sub ${CFDataName}-Lambda-summary-view
      QueryString: 
        "SELECT 
          split_part(replace(functionarn,'\"' ,''),':',7) as function_name, 
          try_cast(current_costtotal AS DOUBLE) - try_cast(recommendationOptions_1_costhigh AS DOUBLE) as recommendationOptions_1_Saving ,
          try_cast(current_costtotal AS DOUBLE) - try_cast(recommendationOptions_2_costhigh AS DOUBLE) as recommendationOptions_2_Saving ,
          try_cast(current_costtotal AS DOUBLE) - try_cast(recommendationOptions_3_costhigh AS DOUBLE) as recommendationOptions_3_Saving , 
          * 
          FROM optimization_data.compute_optimizer_lambda
          WHERE functionarn like '%arn%'"